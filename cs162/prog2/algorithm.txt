Jack Thake
CS162
July 7th, 2020
Program 2

This program is a simple puzzle game that has two players and can go no longer
than 5 rounds. The game starts with player 1 entering a word and then a phrase,
the word is then embedded into the passed phrase with the following rules:
  1. Each word gets one character embedded into it, the nth word gets the nth
     character, ie. the second character goes in the second words second
     character, and so on.
  2. If a word in the player entered phrase is all capitalized we skip the word not embedding any characters into that word.
  3. If a word is not long enough to embed the current character the word gets skipped and has no character stored in it.
  4. If an underscore is encountered, a random character will be inserted

As an example if the user entered the the word "cat" as the word to be embedded,
and the phrase "hello world, THIS is an_ interest_ng program." the output could
be "cello warld, this is anG interestyng program."
    ^      ^                   ^
    c      a                   t

------------------ Process ------------------
Step 1. Prepare variables
      - We need variables holding which turn it is and the scores of the two
        players
      - Will also need variables holding the phrase and word for the current
        turn, as well as for the individual scores 
Step 2. Introduce rules to both players
      - Print out to the players the premise of the game as well as every rule
        and how the turns work 
Step 3. Prompt appropriate player for the secret word and phrase
      - Prompt user for their secret word and store it
      - Prompt user for their phrase and store it
Step 4. Clear the screen
      - Print many new lines, don't use platform-specific system calls
Step 5. Hide the word in the phrase
      - Separate the phrase into separate words
      - Loop through all the words looking at one whole word at a time rather
        then a character at a time
      - Check each rule individually
          - Check if the phrase word is not capitalized (if it is we skip it)
          - Check if there is enough space in the word to embed a character (if
            there isn't enough space, we skip it)
          - If we encounter an underscore, regardless of if it is in a word or
            not there will be a random character inserted.
      - Then we increment which character in the secret word and the current
        word in the phrase that we are working with
      - Continue looping until we run out out of words to use or characters to
        insert
      - If we run out of words to insert characters, we throw an error
Step 6. Get the guessing players input
      - After displaying the phrase with the imbedded word, prompt them to make
        their guess
      - Store their input
Step 7. Compare the guessing players input to the right answer
      - If the guessing player is correct then we increment their score
      - If the guesser is wrong, we increment the non-guessing player's score
Step 8. Check if there are more rounds to be played
      - If either score is greater than or equal to 3, then the game is over and a winner is declared.
      - If not switch wich turn it is and move back to step 3.
Step 9. Return to the operating system
      - Return from the program, printing a goodbye message.
